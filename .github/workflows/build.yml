name: Docker Build

on:
  push:
    branches:
      - dev
      - master
  release:
    types:
      - published

jobs:

  test:
    name: "Run Test"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Get source
        uses: actions/checkout@v2

      - name: Get deps
        run: make deps

      - name: Test
        run: make test


  build:
    name: "Build And Push"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm/v7, linux/arm64, linux/386, linux/amd64]
    steps:

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Get source
        uses: actions/checkout@v2

      - name: Print version
        id: "version"
        run: |
          echo "Version:" $(git branch --show-current)-$(git rev-parse --short HEAD)
          echo "::set-output name=branch::$(git branch --show-current)"
          echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"
          echo "::set-output name=platforms::linux/arm/v7,linux/arm64,linux/386,linux/amd64"

      - name: Get deps
        run: go mod vendor

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push when push
        id: push_build
        uses: docker/build-push-action@v2
        if: startsWith(github.ref, 'refs/tags/v') == false
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            csust/csust-got:latest-${{ steps.version.outputs.branch }}

      - name: Build and push when release
        id: release_build
        uses: docker/build-push-action@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            csust/csust-got:latest
            csust/csust-got:${{ steps.version.outputs.tag }}
          build-args: |
            TAG=${{ steps.version.outputs.tag }}
            BRANCH=release
            RELEASE=release

      - name: Image digest
        run: echo ${{ steps.push_build.outputs.digest }}${{ steps.release_build.outputs.digest }}


  deploy:
    name: "Deployment"
    runs-on: ubuntu-latest
    needs: [ test, build ]
    steps:

      - name: Get source
        uses: actions/checkout@v2
      
      - name: Print version
        id: "version"
        run: |
          echo "::set-output name=branch::$(git branch --show-current)"

      - name: Wait for tests to succeed
        uses: lewagon/wait-on-check-action@v1.1.1
        with:
          ref: ${{ github.ref }}
          check-name: Test
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

      - name: Develop Deployment
        uses: appleboy/ssh-action@master
        if: steps.version.outputs.branch == 'dev' && startsWith(github.ref, 'refs/tags/v') == false
        with:
          host: ${{ secrets.HOST_DEV }}
          port: ${{ secrets.PORT_DEV }}
          username: ${{ secrets.USERNAME_DEV }}
          key: ${{ secrets.PRIVATE_KEY_DEV }}
          script: cd csust-got && docker-compose pull && docker-compose up -d
      
      - name: Release Deployment
        uses: appleboy/ssh-action@master
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: cd csust-got && docker-compose pull && docker-compose up -d
